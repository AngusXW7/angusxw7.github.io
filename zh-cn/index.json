[{"categories":["C++"],"content":"关于C指针的一点拙见","date":"2022-03-09","objectID":"/zh-cn/c_pointer/","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"C系列语言的精髓 指针！ 哈喽，我又在百忙之中抽出时间如约而至啦。今天来浅谈一下指针吧，都说C的精髓就是指针，不过也确实，C应该是为数不多可以凭借指针操控底层内存的高级语言了。我的理解程度肯定没有大神级别的那么深，毕竟是个刚入门的小白，用词不准确或者逻辑不严谨的话，还请多指教啦~，如果有哪里说的不对，也欢迎指出！ ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:0:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"指针是什么 那展开问题之前，我们要先搞清楚指针是什么。 我们经常说，指针就是地址，指针变量是用来存放内存地址的变量的。 我的理解呢，指针就相当于你家的代名词，而内存地址就是你家实际在的地方。常说的指针指向了某某地址，其实就是在说，你家这个代名词说明了你家地址所在地（就是你家住哪）。这样讲听着有点像废话。 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:1:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"我们还是来举个例子吧： int* ptr= 0X12345678; int* ptr = \u0026 XW7的家; 我们有一个整形指针 ptr （我家代名词）： int* ptr ; 这个指针指向了（我家实际地址）：0X12345678; //一般情况下内存地址用八位的十六进制表示，0X开头是为了和二进制，八进制还有十进制作区分 一般写成 int* ptr = \u0026 XW7的家; 我们先忽略这个 “\u0026” ，把 “=” 读作 “是” ，那么现在这句话是不是就在说 ptr 是 xw7的家。 接下来，比如我要邀请我的朋友周末来我家玩，那我光和他说 ptr 他肯定不能平白无故的知道我家在哪，对吧。 所以我们要用“\u0026”表示地址，那么int* ptr = \u0026 XW7的家 现在就变成了 ptr = 12市34区56街78号，即我家的实际地址，同样的，我们把“=”读作“是”，XW7的家是12市34区56街78号。这样我的朋友们周末就可以顺利的找到我家了。 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:1:1","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"“*” int* *ptr //不存在 int* ptr = 什么 ; ptr* = 什么 ; “*“这个符号呢跟随不同的主人，就会代表不同的意思，我们俗称嫁鸡随鸡嫁狗随狗。 但是我们不会看见int* * 变量名（int* *ptr） 这种东西存在的； 我们只会看到int* 变量名 = 什么; 或者 *ptr = 什么; char* c ;//char类型指针 int* i ;//int类型指针 float* f ;//float类型指针 一般情况下，如果它跟的是数据类型，比如 char int float 这种，那么它就代表这个类型的指针 char* 就是 char 类型指针; int* 就是 int 类型指针; float* 就是 float 类型指针; 以此类推 // 32位系统下，所有的指针大小都为4字节； *ptr = XW7 的家 ; ptr = 0X12345678; 但是如果它跟了变量名称，就比如上面的 *ptr 那它就代表解引用了，就要使用代名词了。通俗的来讲给 ptr 加上了 * 就是把 ptr 被加密了 只能说 XW7的家 ， 而不能将 12市34区56街78号 这个确切的地址讲出来。即 *ptr = XW7的家 , *ptr是XW7的家。 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:1:2","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"const与*的爱恨情仇 我相信很多人都因为 const和 * 的摆放位置而被搞得晕头转向过，不过当你抓住的精髓，你就会觉得非常的简单了。什么指针常量，常量指针的，一眼就可以分辨出来。 首先可能有人问，const是什么东西啊。哈哈， cosnt其实就是一个修饰词，被他修饰的东西不可以改变。 这里我分享一下我的小技巧： ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:2:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"技巧 首先我们列出来几种很常见的格式： const int * ptr；// 1 int const * ptr；// 2 int * const ptr；// 3 我们要怎么来区分呢?很简单,我们只需要看两个东西，一个就是 * 还有一个就是 ptr; 如果const后面紧跟着的是 * 那么毫无疑问 const 修饰了 * ，代表 *指向的东西不可以改变；//1,2 如果const后面紧跟着的是 变量名 （即ptr），那么const就是修饰了变量名，代表变量名所代表的值不可以被改变。//3 还有一件非常重要的事情，就是const是一次性的，要是想要多个不能被改变的指向或者值，就要使用多个const，如： const int* const ptr; // int* 与 ptr 都不可变 const int* const p1, const p2; // int* p1 p2全都不可变 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:2:1","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"用途 那么知道谁不可以改变以后，我们要用它们来干什么呢；首先我们从命名语句中可以得到两个比较有用的信息，一个是指针指向谁，还有一个就是指向的东西包含了什么内容。 我们用租房子来举例子，指针代表房子，里面的内容代表租客； 如果指向的东西不能改变，那现在就是房东身份，也就是说只要是我的房子就行，哪些租客无所谓，可以随意更换。 如果指向的内容不能改变，那现在就是租客身份，也就是说只要是我在租房就行，哪间房子无所谓，可以随意更换。 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:2:2","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"延伸 再往下延伸呢，应该就要触及到对象和类了，我们简单的说一下: const 返回类型 函数名 （参数）； // 表示我的返回类型不能修改 返回类型 函数名 （const 参数）； // 表示我的传入参数不能修改 返回类型 函数名 （参数）const ； // 表示我的类成员参数不能修改 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:2:3","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"数组与*的爱恨情仇 我们都知道当数组被当做参数传入函数的的时候会被隐式的退化成指针，所以我们任性的把数组当成一种指针 下面我们来说几种容易让人混淆的数组与*的组合： ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:3:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"示例 int array[]; int* p = array; *p ; // array[0] p+1 ; //array[0]的地址 + 4 *p+1 ; //array[0]的值 + 1 *(p+1) ; //array[1] *（ *（p+n)+m) = p[n][m]; 假设我们有一个数组叫array， *p =array; 那么： *p 代表了数组的第一个元素即 array[0], p + 1 代表了数组第一个元素的地址向后偏移一个单位的地址，如果array类型为 char 偏移量即为1，int偏移量为4 float 偏移量为4，以此类推。隐式的表示了数组第二个元素的地址。 *p + 1 代表了数组第一个元素的值+1 即 array[0]的值 +1 *(p + 1 ) 代表了数组下标为1的元素 ,即 p[1] 所以我们可以很简单的得出一个 *（p+n)=p[n]; // *( + ) =[] 那如果是多员数组呢？ 很简单 *（ *（p+n)+m) = p[n][m]; ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:3:1","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"指针操作 永远都要记得在函数中 只有下一级的指针才可以操作当前等级指针，你可能有点蒙，我来给你解释一下： 没有*的我们姑且称为零级指针 *为一级指针 **为二级指针 这里有 p *p **p; 那么 *p 可以操作 p ,**p 可以操作 *p，以此类推 如果你在尝试看懂一个多级指针，那么阅读顺序一定是从右往左的。 ( * (* ( * (m))) 就比如这个, 你要先看 m 然后看 *（m）; 再看 * (*(m)); 最后看 *( * ( * (m))); 千万不要想着一口吃一个胖子。 ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:4:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["C++"],"content":"分享总结 好了今天的分享就到这里了，要去忙了。 这里分享一个比较不错的指针教程，希望可以对屏幕前的你有帮助； 嘿嘿~ ","date":"2022-03-09","objectID":"/zh-cn/c_pointer/:5:0","tags":["Pointer","C++","essence"],"title":"C++ 指针","uri":"/zh-cn/c_pointer/"},{"categories":["general"],"content":"人生中的第一篇博客，还是抽出来时间写的","date":"2022-03-02","objectID":"/zh-cn/hello-world/","tags":["hello-world","general","others"],"title":"你好，世界！","uri":"/zh-cn/hello-world/"},{"categories":["general"],"content":"你好，屏幕面前的你！ 首先很感谢你能来到我的博客，这是我第一次尝试来搭建博客并在上面用makedown语法编辑文章，我希望在这里你可以见证我的成长，我的改变。同时也可以和我一起见证这个博客从零到一，从无到有的过程。 准备了半个月终于把网站的基础建设都设置好了，本来这篇文章是想在3月1号发出来的，作为一个月的开始，也是这个网站的开始，肯定是一个很不错的日子。只可惜啊，真的是太忙了，刚刚腾出来点时间写这篇博客，刚开始创建了这个文档的时候竟然不知道名字该叫什么，内容该写一些什么，哈哈。毕竟平时也很少写东西分享东西，突然有那么一点蒙蒙的。 既然是程序员，那肯定所有人都是从一句“Hello World！”开始的，所以我的博客也将从“你好，世界！”开始，希望中间不会出现‘break’或者‘sleep’。 博客里的内容，我的初步设想是分为虚幻引擎游戏制作，C++生活和普通三个大板块，毕竟咱是游戏软件编程出身，学习的C++和虚幻引擎，初来乍到一个陌生的领域，肯定得先从自己熟悉的东西开始写才会比较容易产出内容。当然，日后如果觉得有什么东西很有趣，也会成为新的板块加入到我博客的大家庭中。 好了，就先说这么多吧，要赶紧去忙了。如果你对我比较感兴趣，想进一步了解我的话，可以点击右上角的“关于XW7\u0026”来查看我的个人资料。个人资料肯定是会持续更新的，毕竟人都在成长，经历和能力还有作品都会随着时间的推移越来越丰富的。 嘿嘿~ ","date":"2022-03-02","objectID":"/zh-cn/hello-world/:0:0","tags":["hello-world","general","others"],"title":"你好，世界！","uri":"/zh-cn/hello-world/"},{"categories":null,"content":"This is for test. ","date":"2022-02-15","objectID":"/zh-cn/testblog/:0:0","tags":null,"title":"TestBlog","uri":"/zh-cn/testblog/"},{"categories":null,"content":"class XW7\u0026 struct 基本信息 { 专业 : 游戏设计与软件编程； 擅长语言 : C++ //从入学老师就教的C++ ； 梦想 : 做出一款让人自然而然就会喜欢上的MMORPG国风游戏(汉服YYDS！)； 性格 : 待人宽容，对人友善，尊有德之老，爱有教之幼，活泼开朗，慢热型人格，对待事情认真负责，待人宽容且耐心，具有团队合作精神，往往能提出意想不到且富有创造性的提议； 兴趣爱好 : 打游戏，听歌，旅行，看别人拍的照片，看别人吃美食，喜欢各种有趣、带有科技感的小玩意（比如：无人机）； 偏爱城市 : 海南，珠海，西安； … ; } struct 个人技能 { 熟悉 C++，了解部分14/17/20新特性,具有Debug能力； 熟悉 Unreal Engine 4 ，并有个人独立开发的完整作品； 掌握 数据结构与算法，具有良好的编程习惯； 掌握 MYSQL的基本应用 //CRUD； 了解 Golang基本语法和简单的使用； 了解 Unreal Engine 5，已尝试使用了UE5抢先体验版，并进行学习； 了解 Unity3D对于手机游戏的开发，并有自己的作品[]； 了解 计算机网络基础知识，比如TCP/IP、socket等； 了解 MAYA基础的建模以及Nuke和Renderman对做出来的建模进行渲染与制作视频； 了解 Linux操作系统，基本掌握日常使用； const 一大波全新的技能正在路上！； } struct 作品 { UE4 开放世界游戏Demo； C++ 游戏引擎; Golang { 日志; ini配置文件解析器; } } struct 联系方式 { QQ : 714152655; 邮箱 : angusli951102@gmail.com； github; Steam; 领英; 微博; 哔哩哔哩; } ","date":"0001-01-01","objectID":"/zh-cn/about/:0:1","tags":null,"title":"关于 XW7\u0026","uri":"/zh-cn/about/"}]